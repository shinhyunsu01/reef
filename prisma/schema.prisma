// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch"]
}

datasource db {
  provider             = "mysql"
  url                  = env("NEXT_PUBLIC_API_URL")
  referentialIntegrity = "prisma"
}

model User {
  id        Int     @id @default(autoincrement())
  nickname  String?
  email     String  @unique
  gender    String?
  age       String?
  birthyear String?

  avatar     String?
  backavatar String?

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  aquaInfo   AquaInfo[]
  uploadInfo UploadInfo[]
  Answer     Answer[]
  ReAnsWer   ReAnsWer[]
  Graph      Graph[]
}

model AquaInfo {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  skimmer    String?
  watertank  String?
  lamp       String?
  watermotor String?

  temp       String?
  ph         String?
  salt       String?
  alkalinity String?
  calcium    String?
  mag        String?
  nitrate    String?
  phosphorus String?

  season Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //@@index([userId])
}

model UploadInfo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  picType     String?
  animateType String?
  coralType   String?
  avatar      String?

  description String?    @db.MediumText
  hashtag     String?
  //@@index([userId])
  Answer      Answer[]
  ReAnsWer    ReAnsWer[]
}

model Answer {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  upload    UploadInfo @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  uploadId  Int
  answer    String     @db.MediumText
  ReAnsWer  ReAnsWer[]
}

model ReAnsWer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  upload   UploadInfo @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  uploadId Int

  answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId Int

  reanswer String @db.MediumText
}

model Graph {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  element   String
  graphdata String?
  date      String?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}
